<?php

namespace App\DataFixtures;

use App\Entity\Wardrobe;
use App\Entity\Skin;
use App\Entity\Showcase;
use App\Entity\Member;
use App\Entity\User;
use App\DataFixtures\UserFixtures;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;



class AppFixtures extends Fixture implements DependentFixtureInterface
{
     //reference names for wardrobe
     private const JONATHAN_WARDROBE = "jonathan_s_wardrobe";
     private const MICHEL_WARDROBE = "michel_s_wardrobe";
    //reference names for members
    private const JONATHAN = "jonathan";
    private const MICHEL = "michel";
    private const USER = "user";
    private const ADMIN = "admin";
    //reference names for showcases
    private const MYSTAND = "my stands";
    private const BIGBOX = "bigbox";
    private const SHOWMEYOURMOVES = "showmeyourmoves";

    public function getDependencies()
        {
                return [
                        UserFixtures::class,
                ];
        }


     private static function wardrobeDataGenerator()
     {
         yield ["Jonathan's wardrobe", self::JONATHAN_WARDROBE,self::JONATHAN, "My little inventory <3"];
         yield ["Michel's wardrobe", self::MICHEL_WARDROBE, self::MICHEL, "Da Collection"];
     }

     private static function memberDataGenerator(){
        yield ["Jonathan", self::JONATHAN,"jonathan@localhost"];
        yield["Michel", self::MICHEL,"michel@localhost"];
        yield["User", self::USER,"user"];
        yield["Admin",self::ADMIN,"admin"];
     }

     private static function showcasesDataGenerator()
     {
        yield[self::MYSTAND,"My stands", self::JONATHAN,"mudamudamuda",true];
        yield[self::BIGBOX,"Bigbox",self::MICHEL,"Do not look",false];
        yield[self::SHOWMEYOURMOVES,"Show me your moves",self::MICHEL,"Love music",true];
     }


    public function load(ObjectManager $manager): void
    {
        $inventoryRepo = $manager->getRepository(Wardrobe::class);  
        $memberRepo = $manager->getRepository(Member::class);

        foreach (self::memberDataGenerator() as [$name, $memberReference,$useremail]){
            $member = new Member();
            if ($useremail) {
                $user = $manager->getRepository(User::class)->findOneByEmail($useremail);
                $member->setUser($user);

        }
            $member->setName($name);
            $manager->persist($member);
            $manager->flush();

            $this->addReference($memberReference, $member);
        }
        foreach (self::wardrobeDataGenerator() as [$name, $wardrobeReference, $memberReference, $description] ) {
            $member = $this->getReference($memberReference);
            $wardrobe = new Wardrobe();
            $wardrobe->setName($name);
            $wardrobe->setDescription($description);
            $member->addWardrobe($wardrobe);
            $manager->persist($wardrobe);
            $manager->persist($member);
            $manager->flush();

            // Once the Wardrobe instance has been saved to DB
            // it has a valid Id generated by Doctrine, and can thus
            // be saved as a future reference
            $this->addReference($wardrobeReference, $wardrobe);
        }
        // $product = new Product();
        // $manager->persist($product);
        $this-> loadShowcases($manager);
        $this -> loadSkins($manager);

    }
    
    private function loadSkins(ObjectManager $manager)
    {
        foreach (self::getSkinData() as [$wardrobeReference,$showcaseReference,$name, $rarety]) {
            $wardrobe = $this->getReference($wardrobeReference);
            $skin = new Skin();
            $skin->setName($name);
            $skin->setRarety($rarety);
            $wardrobe->addSkin($skin);
            if($showcaseReference != null){
                $showcase = $this->getReference($showcaseReference);
                $showcase->addSkin($skin);
            }
            $manager->persist($skin);
            $manager->persist($wardrobe);
        }
        $manager->flush();
    }

    private function loadShowcases(ObjectManager $manager)
    {   
        foreach(self::showcasesDataGenerator() as [$showcaseReference,$name,$creatorReference,$description,$isPublic]){
            $creator = $this->getReference($creatorReference);
            $showcase = new Showcase();
            $showcase->setName($name);
            $showcase->setDescription($description);
            $showcase->setCreator($creator);
            $showcase->setIsPublic($isPublic);
            $manager->persist($showcase);
            $manager->persist($creator);
            $manager->flush();

            $this->addReference($showcaseReference,$showcase);

        }
    }
    
    private function getSkinData()
    {
        // Skin = [inventory ref, name, rarety];
        yield [self::JONATHAN_WARDROBE,null,'Supreme Dragon', "Legendary"];
        yield [self::MICHEL_WARDROBE,self::BIGBOX,'LittleMan', "Epic"];
        yield [self::JONATHAN_WARDROBE,self::MYSTAND,'SpeedWagon',  "Rare"];
        yield [self::JONATHAN_WARDROBE,self::MYSTAND,'The World', "Unique"];
        yield [self::MICHEL_WARDROBE, self::SHOWMEYOURMOVES,'HarpeMonica', "Unique"];
        yield [self::MICHEL_WARDROBE, self::SHOWMEYOURMOVES,'Capo Era', "Common"];
    }
}
